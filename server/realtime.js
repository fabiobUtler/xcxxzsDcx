// server/realtime.js
import { createRequire } from "module";
const require = createRequire(import.meta.url);
const WebSocket = require("ws");

import OpenAI from "openai";
import dotenv from "dotenv";

dotenv.config();

console.log("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω");

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω");
  process.exit(1);
}

const PORT = process.env.PORT || 3001;

const wss = new WebSocket.Server({ port: PORT }, () => {
  console.log(`üü¢ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

wss.on("connection", async (ws) => {
  console.log("üü° [WebSocket] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è");

  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

  try {
    // üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI Realtime
    const stream = await openai.beta.realtime.connect({
      model: "gpt-4o-realtime-preview-2024-12-17",
    });

    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ OpenAI Realtime");

    // ‚öôÔ∏è –°–µ—Å—Å–∏—è
    stream.sendEvent("session.update", {
      session: {
        instructions: `
          –¢—ã ‚Äî —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ.
          –§–∞–∫—Ç—ã:
          - –ò–Ω–≤–µ—Å—Ç–∏—Ä—É—é 5 –ª–µ—Ç –≤ –∫—Ä–∏–ø—Ç—É –∏ –∞–∫—Ü–∏–∏.
          - –ü–æ–º–æ–≥–∞—é –Ω–æ–≤–∏—á–∫–∞–º.
        `,
        voice: "alloy",
        turn_detection: { type: "server_vad" },
        input_audio_transcription: { enabled: true },
      },
    });

    // üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ—á—å
    stream.on("content.audio_transcript", (event) => {
      console.log("üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", event.transcript);
      ws.send(JSON.stringify({ type: "transcript", text: event.transcript }));
    });

    // üîä –ê—É–¥–∏–æ-–æ—Ç–≤–µ—Ç
    stream.on("content.audio", (event) => {
      if (event.role === "assistant") {
        const audioBase64 = Buffer.from(event.audio).toString("base64");
        console.log("üîä –û—Ç–≤–µ—Ç AI, –¥–ª–∏–Ω–∞:", audioBase64.length);
        ws.send(
          JSON.stringify({
            type: "response",
            text: event.transcript || "(–∞—É–¥–∏–æ)",
            audio: audioBase64,
          })
        );
      }
    });

    // üéß –ü—Ä–∏—ë–º –∞—É–¥–∏–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    ws.on("message", (data, isBinary) => {
      if (isBinary) {
        const buffer = Buffer.from(data);
        stream.sendEvent("input_audio_buffer.append", {
          audio: buffer.toString("base64"), // ‚úÖ base64 PCM16
        });
        console.log("üéß –ë–∏–Ω–∞—Ä–Ω–æ–µ –∞—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ OpenAI:", buffer.length);
      } else {
        try {
          const msg = JSON.parse(data.toString());
          console.log("üì© –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg);
        } catch {
          console.log("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç:", data.toString());
        }
      }
    });

    ws.on("close", () => {
      console.log("üî¥ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
      stream.connection?.close();
    });

    stream.on("error", (err) => {
      console.error("‚ùå OpenAI –æ—à–∏–±–∫–∞:", err);
      ws.send(JSON.stringify({ type: "error", message: "–û—à–∏–±–∫–∞ AI", error: err.message }));
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI:", err);
    ws.send(
      JSON.stringify({
        type: "error",
        message: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI",
        error: err.message,
      })
    );
    ws.close();
  }
});
