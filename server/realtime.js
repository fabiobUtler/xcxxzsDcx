// server/realtime.js

import { createRequire } from "module";
const require = createRequire(import.meta.url);
const WebSocket = require("ws");

import OpenAI from "openai";
import dotenv from "dotenv";

dotenv.config();
console.log("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω");

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω");
  process.exit(1);
}

const PORT = process.env.PORT || 3001;
const wss = new WebSocket.Server({ port: PORT }, () => {
  console.log(`üü¢ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

wss.on("connection", async (ws) => {
  console.log("üü° [WebSocket] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è");

  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

  try {
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
    const stream = await openai.beta.chat.completions.run({
      model: "gpt-4o-realtime-preview-2024-12-17",
      messages: [
        {
          role: "system",
          content: `
            –¢—ã ‚Äî —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ.
            –§–∞–∫—Ç—ã:
            - –ò–Ω–≤–µ—Å—Ç–∏—Ä—É—é 5 –ª–µ—Ç –≤ –∫—Ä–∏–ø—Ç—É –∏ –∞–∫—Ü–∏–∏.
            - –ü–æ–º–æ–≥–∞—é –Ω–æ–≤–∏—á–∫–∞–º.
          `,
        },
      ],
      eventHandler: {
        onAudioTranscript(delta) {
          console.log("üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", delta);
          ws.send(JSON.stringify({ type: "transcript", text: delta }));
        },
        onAudio(audio) {
          const audioBase64 = Buffer.from(audio).toString("base64");
          console.log("üîä –û—Ç–≤–µ—Ç AI, –¥–ª–∏–Ω–∞:", audioBase64.length);
          ws.send(
            JSON.stringify({
              type: "response",
              text: "(–∞—É–¥–∏–æ)",
              audio: audioBase64,
            })
          );
        },
        onError(err) {
          console.error("‚ùå OpenAI Error:", err);
          ws.send(
            JSON.stringify({
              type: "error",
              message: "–û—à–∏–±–∫–∞ AI",
              error: err.message,
            })
          );
        },
      },
    });

    // === –ü–µ—Ä–µ–¥–∞—á–∞ –∞—É–¥–∏–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ===
    ws.on("message", (data) => {
      if (data instanceof ArrayBuffer) {
        const buffer = Buffer.from(data);
        stream.appendInputAudio(buffer);
        console.log("üéß –ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ OpenAI");
      }
    });

    ws.on("close", () => {
      console.log("üî¥ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
      stream?.stop?.();
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI:", err);
    ws.send(
      JSON.stringify({
        type: "error",
        message: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI",
        error: err.message,
      })
    );
    ws.close();
  }
});