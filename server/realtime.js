// server/realtime.js

import { createRequire } from "module";
const require = createRequire(import.meta.url);
const WebSocket = require("ws");

import OpenAI from "openai";
import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();
console.log("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API-–∫–ª—é—á–∞
if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå –û–®–ò–ë–ö–ê: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env");
  process.exit(1);
} else {
  console.log("‚úÖ OPENAI_API_KEY –∑–∞–≥—Ä—É–∂–µ–Ω (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤):", process.env.OPENAI_API_KEY.slice(0, 8) + "...");
}

const PORT = process.env.PORT || 3001;

// –°–æ–∑–¥–∞—ë–º WebSocket-—Å–µ—Ä–≤–µ—Ä
const wss = new WebSocket.Server({ port: PORT }, () => {
  console.log(`üü¢ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîó –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ws://localhost:${PORT}`);
});

wss.on("connection", async (ws) => {
  console.log("üü° [WebSocket] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è");

  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

  let stream; // –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å stream

  try {
    console.log("üü° [OpenAI] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Realtime API...");

    // === üî• –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===
    stream = await openai.beta.realtime.connect({
      model: "gpt-4o-realtime-preview-2024-12-17",
    });

    console.log("‚úÖ [OpenAI] –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Realtime API");

    // === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ ===
    console.log("‚öôÔ∏è [Realtime] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é...");
    stream.sendEvent("session.update", {
      session: {
        instructions: `
          –¢—ã ‚Äî —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.
          –§–∞–∫—Ç—ã:
          - –Ø –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é 5 –ª–µ—Ç –≤ –∫—Ä–∏–ø—Ç—É –∏ –∞–∫—Ü–∏–∏.
          - –ü–æ–º–æ–≥–∞—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
          - –î–∞—é –≥–∞—Ä–∞–Ω—Ç–∏–π –ø—Ä–∏–±—ã–ª–∏.
        `,
        voice: "alloy",
        turn_detection: { type: "server_vad" },
        input_audio_transcription: { enabled: true },
      },
    });
    console.log("‚úÖ [Realtime] –°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");

    // === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç OpenAI ===

    stream.on("error", (event) => {
      console.error("‚ùå [OpenAI] –û—à–∏–±–∫–∞:", event.error);
      ws.send(
        JSON.stringify({
          type: "error",
          source: "openai",
          message: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenAI",
          error: event.error?.message,
        })
      );
    });

    stream.on("session.created", (event) => {
      console.log("üÜï [OpenAI] –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:", event.model);
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stream.on("content.audio_transcript", (event) => {
      if (event.type === "input") {
        console.log("üéôÔ∏è [Transcript] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª:", event.transcript);
        ws.send(
          JSON.stringify({
            type: "transcript",
            text: event.transcript,
          })
        );
      }
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
    stream.on("content.audio", (event) => {
      if (event.role === "assistant") {
        const audioBase64 = Buffer.from(event.audio).toString("base64");
        console.log("üîä [Response] AI –æ—Ç–≤–µ—Ç–∏–ª, –∞—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–ª–∏–Ω–∞:", audioBase64.length);

        ws.send(
          JSON.stringify({
            type: "response",
            text: event.transcript || "(–∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç)",
            audio: audioBase64,
          })
        );
      }
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    stream.on("input_audio_buffer.committed", (event) => {
      console.log("üì® [Audio Buffer] –ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä");
    });

    stream.on("response.done", (event) => {
      console.log("ü§ñ [Response] –û—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:", event.response?.output?.[0]?.text || "(–∞—É–¥–∏–æ)");
    });

    // === –ü—Ä–∏—ë–º –∞—É–¥–∏–æ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (—á–µ—Ä–µ–∑ WebSocket) ===
    ws.on("message", (data) => {
      console.log("üì© [WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä:", data.length);

      if (data instanceof ArrayBuffer) {
        const buffer = Buffer.from(data);
        console.log("üéß [Audio] –ê—É–¥–∏–æ –ø—Ä–∏–Ω—è—Ç–æ, –¥–ª–∏–Ω–∞:", buffer.length, "–±–∞–π—Ç");

        try {
          stream.sendEvent("input_audio_buffer.append", {
            audio: buffer,
          });
          console.log("üì§ [OpenAI] –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä");
        } catch (err) {
          console.error("‚ùå [OpenAI] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ:", err);
        }
      } else {
        try {
          const msg = JSON.parse(data);
          console.log("üîç [Control] –°–æ–æ–±—â–µ–Ω–∏–µ:", msg.type);
        } catch (e) {
          console.warn("‚ö†Ô∏è [Unknown] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON");
        }
      }
    });

    // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ===
    ws.on("close", () => {
      console.log("üî¥ [WebSocket] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
      if (stream && !stream.closed) {
        stream.connection?.close();
      }
    });

    ws.on("error", (err) => {
      console.error("‚ùå [WebSocket] –û—à–∏–±–∫–∞:", err);
      if (stream && !stream.closed) {
        stream.connection?.close();
      }
    });

    // –ï—Å–ª–∏ stream —Å–∞–º –∑–∞–∫—Ä–æ–µ—Ç—Å—è
    stream.on("disconnect", () => {
      console.log("üî¥ [OpenAI] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Realtime —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ");
      ws.close();
    });
  } catch (err) {
    console.error("‚ùå [Critical] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ OpenAI:", err.message || err);
    if (err.error) console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", err.error);

    ws.send(
      JSON.stringify({
        type: "error",
        source: "connection",
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI",
        error: err.message,
      })
    );

    ws.close();
  }
});